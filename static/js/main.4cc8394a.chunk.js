(this["webpackJsonp@open-sauced/explore.opensauced.pizza"]=this["webpackJsonp@open-sauced/explore.opensauced.pizza"]||[]).push([[0],{175:function(n,e,t){},250:function(n,e,t){},252:function(n,e,t){"use strict";t.r(e);var r=t(2),o=t.n(r),i=t(71),a=t.n(i),s=(t(175),t(44)),u=t(45),l=t(169),d=t(168),c=t(49),p=t(51),g=t(75),y=t.n(g),m=t(110),f=t(254),b=t(35),h=t(0);function O(n){for(var e=n;Object(h.U)(e);)e=e.ofType;return e}function $(n,e){var t=O(n.type);return!(!t.name.startsWith("GitHub")||!t.name.endsWith("Connection")||"first"!==e.name&&"orderBy"!==e.name)}function S(n,e,t){var r=O(n.type);switch(r.name){case"GitHubRepository":if("name"===e.name)return{kind:"StringValue",value:"graphql-js"};if("owner"===e.name)return{kind:"StringValue",value:"graphql"};break;case"NpmPackage":if("name"===e.name)return{kind:"StringValue",value:"graphql"};break;default:if(Object(h.E)(t)&&r.name.startsWith("GitHub")&&r.name.endsWith("Connection")){if("direction"===e.name&&t.getValues().map((function(n){return n.name})).includes("DESC"))return{kind:"EnumValue",value:"DESC"};if("field"===e.name&&t.getValues().map((function(n){return n.name})).includes("CREATED_AT"))return{kind:"EnumValue",value:"CREATED_AT"}}return y.a.defaultValue(t)}return y.a.defaultValue(t)}var E=t(76),C=t(164),I=t(165),T=Object(I.a)("colorScheme");var w=function(){var n=function(){var n=Object(C.useMediaQuery)({query:"(prefers-color-scheme: dark)"},void 0),e=T(),t=Object(E.a)(e,2),o=t[0],i=t[1],a=Object(r.useMemo)((function(){return void 0===o?!!n:o}),[o,n]);return Object(r.useEffect)((function(){a?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")}),[a]),{isDark:a,setIsDark:i}}(),e=n.isDark,t=n.setIsDark;return o.a.createElement(p.a.Button,{label:"Theme",title:"Toggle Dark Mode",onClick:function(){return t(!e)}})},j=t(167),v="bc178799-292e-49df-8016-223abf5a07cb",k=new j.a({appId:v}),D={auth:k,appId:v,fetchOneGraph:function(n){return fetch("https://serve.onegraph.com/dynamic?app_id="+v,{method:"POST",headers:Object(c.a)({},k.authHeaders()),body:JSON.stringify(n)}).then((function(n){return n.text()})).then((function(n){try{return JSON.parse(n)}catch(e){return n}}))}},x={ALL:'query IssuesBeforeQuery($owner: String!, $repo: String!, $cursor: String) {\n        gitHub {\n          repositoryOwner(login: $owner) {\n            repository(name: $repo) {\n              issues(first: 5, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}, before: $cursor) {\n                totalCount\n                data: edges {\n                  cursor\n                  node {\n                    id\n                    title\n                    url\n                    state\n                    author {\n                      login\n                    }\n                    labels(first: 5) {\n                      data: edges {\n                        node {\n                          id\n                          name\n                          color\n                        }\n                      }\n                    }\n                    comments {\n                      totalCount\n                    }\n                    milestone {\n                      title\n                    }\n                    participants(first: 3) {\n                      totalCount\n                      nodes {\n                        login\n                        avatarUrl\n                      }\n                    }\n                    createdAt\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      query IssuesAfterQuery($owner: String!, $repo: String!, $cursor: String) {\n        gitHub {\n          repositoryOwner(login: $owner) {\n            repository(name: $repo) {\n              issues(first: 5, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}, after: $cursor) {\n                totalCount\n                data: edges {\n                  cursor\n                  node {\n                    id\n                    title\n                    url\n                    state\n                    author {\n                      login\n                    }\n                    labels(first: 5) {\n                      data: edges {\n                        node {\n                          id\n                          name\n                          color\n                        }\n                      }\n                    }\n                    comments {\n                      totalCount\n                    }\n                    milestone {\n                      title\n                    }\n                    participants(first: 3) {\n                      totalCount\n                      nodes {\n                        login\n                        avatarUrl\n                      }\n                    }\n                    createdAt\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      query FetchGoal($number: Int!) {\n        gitHub {\n          viewer {\n            repository(name: "open-sauced-goals") {\n              issue(number: $number) {\n                id\n                body\n                title\n                number\n              }\n            }\n          }\n        }\n      }\n      query FetchGoals() {\n        gitHub {\n          viewer {\n            repository(name: "open-sauced-goals") {\n              id\n              data: object(expression: "HEAD:data.json") {\n                id\n                ... on GitHubBlob {\n                  id\n                  text\n                }\n              }\n              issues(\n                first: 50\n                states: OPEN\n                orderBy: { direction: DESC, field: CREATED_AT }\n              ) {\n                totalCount\n                nodes {\n                  id\n                  full_name: title\n                  body\n                  number\n                  labels(first: 3) {\n                    nodes {\n                      color\n                      name\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      query FetchOwnerQuery($owner: String!) {\n        gitHub {\n          user(login: $owner) {\n            id\n          }\n        }\n      }\n      query FetchMemberStatusQuery() {\n        gitHub {\n          viewer {\n            organization(login: "open-sauced") {\n              viewerIsAMember\n            }\n          }\n        }\n      }\n      query FetchRateLimitQuery() {\n        gitHub {\n          rateLimit {\n            remaining\n          }\n        }\n      }\n      \n      query FetchRepoCountQuery() {\n        gitHub {\n          search(query: "open-sauced-goals", type: REPOSITORY) {\n            repositoryCount\n          }\n        }\n      }\n      mutation CreateOpenSaucedGoalsRepo($ownerId: ID!) {\n        gitHub {\n          cloneTemplateRepository(\n            input: {\n              repositoryId: "MDEwOlJlcG9zaXRvcnkyNjYzNDYyNDM="\n              visibility: PUBLIC\n              ownerId: $ownerId\n              name: "open-sauced-goals"\n            }\n          ) {\n            repository {\n              id\n              name\n              nameWithOwner\n              url\n              issues(\n                first: 10\n                states: OPEN\n                orderBy: { direction: DESC, field: CREATED_AT }\n              ) {\n                totalCount\n                nodes {\n                  id\n                  title\n                  body\n                  number\n                  labels(first: 3) {\n                    nodes {\n                      color\n                      name\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      mutation CreateGoal(\n        $repoId: ID!\n        $title: String!\n        $notes: String\n      ) {\n        __typename\n        gitHub {\n          createIssue(\n            input: {\n              title: $title\n              repositoryId: $repoId\n              body: $notes\n            }\n          ) {\n            issue {\n              id\n              title\n            }\n          }\n        }\n      }\n      mutation UpdateGoal(\n        $id: ID!\n        $state: GitHubIssueState\n        $title: String\n        $notes: String\n      ) {\n        __typename\n        gitHub {\n          updateIssue(\n            input: {\n              id: $id\n              state: $state\n              title: $title\n              body: $notes\n            }\n          ) {\n            issue {\n              id\n              body\n            }\n          }\n        }\n      }\n      query FetchUserForkCount(\n        $repoName: String!\n        $repoOwner: String!\n      ) {\n        gitHub {\n          repository(name: $repoName, owner: $repoOwner) {\n            forks(affiliations: OWNER) {\n              totalCount\n            }\n          }\n        }\n      }\n      mutation ForkRepository(\n        $repoName: String!\n        $repoOwner: String!\n      ) {\n        gitHub {\n          createFork_oneGraph(\n            input: { repoName: $repoName, repoOwner: $repoOwner }\n          ) {\n            clientMutationId\n            repository {\n              id\n              url\n            }\n          }\n        }\n      }\n',IssuesBeforeQuery:"query IssuesBeforeQuery($owner: String!, $repo: String!, $cursor: String) {\n        gitHub {\n          repositoryOwner(login: $owner) {\n            repository(name: $repo) {\n              issues(first: 5, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}, before: $cursor) {\n                totalCount\n                data: edges {\n                  cursor\n                  node {\n                    id\n                    title\n                    url\n                    state\n                    author {\n                      login\n                    }\n                    labels(first: 5) {\n                      data: edges {\n                        node {\n                          id\n                          name\n                          color\n                        }\n                      }\n                    }\n                    comments {\n                      totalCount\n                    }\n                    milestone {\n                      title\n                    }\n                    participants(first: 3) {\n                      totalCount\n                      nodes {\n                        login\n                        avatarUrl\n                      }\n                    }\n                    createdAt\n                  }\n                }\n              }\n            }\n          }\n        }\n      }",IssuesAfterQuery:"query IssuesAfterQuery($owner: String!, $repo: String!, $cursor: String) {\n        gitHub {\n          repositoryOwner(login: $owner) {\n            repository(name: $repo) {\n              issues(first: 5, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}, after: $cursor) {\n                totalCount\n                data: edges {\n                  cursor\n                  node {\n                    id\n                    title\n                    url\n                    state\n                    author {\n                      login\n                    }\n                    labels(first: 5) {\n                      data: edges {\n                        node {\n                          id\n                          name\n                          color\n                        }\n                      }\n                    }\n                    comments {\n                      totalCount\n                    }\n                    milestone {\n                      title\n                    }\n                    participants(first: 3) {\n                      totalCount\n                      nodes {\n                        login\n                        avatarUrl\n                      }\n                    }\n                    createdAt\n                  }\n                }\n              }\n            }\n          }\n        }\n      }",FetchGoal:'\nquery FetchGoal($number: Int!) {\n    gitHub {\n        viewer {\n        repository(name: "open-sauced-goals") {\n            issue(number: $number) {\n            id\n            body\n            title\n            number\n            }\n        }\n        }\n    }\n}        \n    ',FetchGoals:'query FetchGoals() {\n  gitHub {\n    viewer {\n      repository(name: "open-sauced-goals") {\n        id\n        data: object(expression: "HEAD:data.json") {\n          id\n          ... on GitHubBlob {\n              id\n              text\n          }\n        }\n        issues(\n          first: 50\n          states: OPEN\n          orderBy: { direction: DESC, field: CREATED_AT }\n        ) {\n          totalCount\n          nodes {\n            id\n            full_name: title\n            body\n            number\n            labels(first: 3) {\n            nodes {\n                color\n                name\n                id\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n}',FetchOwnerQuery:"query FetchOwnerQuery($owner: String!) {\n  gitHub {\n    user(login: $owner) {\n      id\n    }\n  }\n}",FetchMemberStatusQuery:'query FetchMemberStatusQuery() {\n  gitHub {\n    viewer {\n      organization(login: "open-sauced") {\n        viewerIsAMember\n      }\n    }\n  }\n}',FetchRateLimitQuery:"query FetchRateLimitQuery() {\n  gitHub {\n    rateLimit {\n      remaining\n    }\n  }\n}",FetchRepoCountQuery:'query FetchRepoCountQuery() {\n  gitHub {\n    search(query: "open-sauced-goals", type: REPOSITORY) {\n      repositoryCount\n    }\n  }\n}',CreateOpenSaucedGoalsRepo:'mutation CreateOpenSaucedGoalsRepo($ownerId: ID!) {\n  gitHub {\n    cloneTemplateRepository(\n      input: {\n        repositoryId: "MDEwOlJlcG9zaXRvcnkyNjYzNDYyNDM="\n        visibility: PUBLIC\n        ownerId: $ownerId\n        name: "open-sauced-goals"\n      }\n    ) {\n      repository {\n        id\n        name\n        nameWithOwner\n        url\n        issues(\n          first: 10\n          states: OPEN\n          orderBy: { direction: DESC, field: CREATED_AT }\n        ) {\n          totalCount\n          nodes {\n            id\n            title\n            body\n            number\n            labels(first: 3) {\n              nodes {\n                color\n                name\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}',CreateGoal:"mutation CreateGoal(\n  $repoId: ID!\n  $title: String!\n  $notes: String\n) {\n  __typename\n  gitHub {\n    createIssue(\n      input: {\n        title: $title\n        repositoryId: $repoId\n        body: $notes\n      }\n    ) {\n      issue {\n        id\n        title\n      }\n    }\n  }\n}",UpdateGoal:"mutation UpdateGoal(\n  $id: ID!\n  $state: GitHubIssueState\n  $title: String\n  $notes: String\n) {\n  __typename\n  gitHub {\n    updateIssue(\n      input: {\n        id: $id\n        state: $state\n        title: $title\n        body: $notes\n      }\n    ) {\n      issue {\n        id\n        body\n      }\n    }\n  }\n}",FetchUserForkCount:"query FetchUserForkCount(\n  $repoName: String!\n  $repoOwner: String!\n) {\n  gitHub {\n    repository(name: $repoName, owner: $repoOwner) {\n      forks(affiliations: OWNER) {\n        totalCount\n      }\n    }\n  }\n}",ForkRepository:"mutation ForkRepository(\n  $repoName: String!\n  $repoOwner: String!\n) {\n  gitHub {\n    createFork_oneGraph(\n      input: { repoName: $repoName, repoOwner: $repoOwner }\n    ) {\n      clientMutationId\n      repository {\n        id\n        url\n      }\n    }\n  }\n}"},H=(t(249),t(250),t(27)),q=/(adroll|airtable|apollo|asana|box|brex|bundlephobia|chargebee|clearbit|cloudflare|contentful|crunchbase|descuri|devTo|docusign|dribbble|dropbox|eggheadio|emailNode|eventil|facebookBusiness|fedex|firebase|gmail|google|googleAds|hubspot|immigrationGraph|intercom|logdna|mailchimp|meetup|mixpanel|mux|netlify|notion|npm|openCollective|orbit|productHunt|quickbooks|rss|salesforce|slack|spotify|stripe|trello|twilio|twitchTv|twitter|ups|usps|ynab|youTube|youTubeSearch|youTubeVideo|zeit|zendesk)/i,A=function(n){return!(n.type&&n.type.name&&q.test(n.type.name)||n.name&&q.test(n.name)||n.type&&n.type.ofType&&n.type.ofType.name&&q.test(n.type.ofType.name)||function(n){return n.type&&n.type.ofType&&"LIST"===n.type.ofType.kind&&n.type.ofType.ofType&&n.type.ofType.ofType.ofType&&n.type.ofType.ofType.ofType.name&&q.test(n.type.ofType.ofType.ofType.name)}(n))},F=function(n){return!(n.type&&n.type.name&&q.test(n.type.name)||n.name&&q.test(n.name))},N=function(n){return Object(c.a)(Object(c.a)({},n),{},{fields:n.fields?n.fields.filter(A):n.fields,inputFields:n.inputFields?n.inputFields.filter(A):n.inputFields,possibleTypes:n.possibleTypes?n.possibleTypes.filter(A):n.possibleTypes})},R=function(n){return"OBJECT"!==n.kind||n.fields.length>0},G=function(n){Object(l.a)(t,n);var e=Object(d.a)(t);function t(n){var r;return Object(s.a)(this,t),(r=e.call(this,n)).handleEditQuery=function(n){return r.setState({query:n})},r.handleToggleExplorer=function(){r.setState({explorerIsOpen:!r.state.explorerIsOpen})},r.handleEditOperationName=function(n){return r.setState({operationName:n})},r.handleLogin=function(){r.state.isLoggedIn?D.auth.logout("github").then((function(n){"success"===n.result?(console.log("Logout succeeded"),r.setState({isLoggedIn:!1})):console.log("Logout failed")})):D.auth.login("github").then((function(){D.auth.isLoggedIn("github").then((function(n){n?(console.log("Successfully logged in to GitHub"),r.setState({isLoggedIn:!0})):console.log("Did not grant auth for GitHub")}))})).catch((function(n){return console.error("Problem logging in",n)}))},r.graphiql=null,r.state={schema:null,query:"",explorerIsOpen:!0,isLoggedIn:!1},r}return Object(u.a)(t,[{key:"componentDidMount",value:function(){var n=this;D.fetchOneGraph({query:Object(m.a)()}).then((function(e){var t=n.graphiql.getQueryEditor();t.setOption("extraKeys",Object(c.a)(Object(c.a)({},t.options.extraKeys||{}),{},{"Shift-Alt-LeftClick":n.handleInspectOperation}));var r=e.data.__schema.types.filter(F).map(N).filter(R),o={__schema:Object(c.a)(Object(c.a)({},e.data.__schema),{},{types:r})};n.setState({schema:Object(f.a)(o)})})),D.auth.isLoggedIn("github").then((function(e){return n.setState({isLoggedIn:e})}))}},{key:"handleInspectOperation",value:function(n,e){var t=this.state.query,r=Object(b.a)(t||"");if(!r)return console.error("Couldn't parse query document"),null;var o,i,a=n.getTokenAt(e),s={line:e.line,ch:a.start},u={line:e.line,ch:a.end},l={start:n.indexFromPos(s),end:n.indexFromPos(u)},d=r.definitions.find((function(n){if(!n.loc)return console.log("Missing location information for definition"),!1;var e=n.loc;return e.start<=l.start&&e.end>=l.end}));if(!d)return console.error("Unable to find definition corresponding to mouse position"),null;o="OperationDefinition"===d.kind?d.operation:"FragmentDefinition"===d.kind?"fragment":"unknown",i="OperationDefinition"===d.kind&&d.name||"FragmentDefinition"===d.kind&&d.name?d.name.value:"unknown";var c=".graphiql-explorer-root #".concat(o,"-").concat(i),p=document.querySelector(c);return null!==p&&p.scrollIntoView(),!1}},{key:"render",value:function(){var n=this,e=this.state,t=e.query,r=e.schema,o=e.isLoggedIn,i=e.explorerIsOpen,a=e.operationName;return Object(H.jsxs)("div",{className:"graphiql-container",children:[Object(H.jsx)(y.a,{schema:r,query:t,onEdit:this.handleEditQuery,operationName:a,onRunOperation:function(e){return n.graphiql.handleRunQuery(e)},explorerIsOpen:i,onToggleExplorer:this.handleToggleExplorer,getDefaultScalarArgValue:S,makeDefaultArg:$}),Object(H.jsx)(p.b,{ref:function(e){n.graphiql=e},fetcher:D.fetchOneGraph,schema:r,query:t,onEditQuery:this.handleEditQuery,operationName:a,children:Object(H.jsxs)(p.b.Toolbar,{children:[Object(H.jsxs)("select",{defaultValue:"",onChange:function(e){var t=e.target.value;n.handleEditQuery(x[t]),n.handleEditOperationName(t)},children:[Object(H.jsx)("option",{value:"",children:"Choose a Query"}),Object.keys(x).filter((function(n){return"ALL"!==n})).map((function(n){var e=0===x[n].trim().indexOf("mutation");return Object(H.jsxs)("option",{value:n,children:[e?"(Mutation) ":"",n]},n)}))]}),Object(H.jsx)(p.b.Button,{onClick:function(){return n.graphiql.handlePrettifyQuery()},label:"Prettify",title:"Prettify Query (Shift-Ctrl-P)"}),Object(H.jsx)(p.b.Button,{onClick:function(){return n.graphiql.handleToggleHistory()},label:"History",title:"Show History"}),Object(H.jsx)(p.b.Button,{onClick:this.handleToggleExplorer,label:"Explorer",title:"Toggle Explorer"}),Object(H.jsx)(w,{}),Object(H.jsx)(p.b.Button,{onClick:this.handleLogin,label:"Log ".concat(o?"out of":"in to"," GitHub"),title:"GitHub"})]})})]})}}]),t}(r.Component);a.a.render(Object(H.jsx)(o.a.StrictMode,{children:Object(H.jsx)(G,{})}),document.getElementById("root"))}},[[252,1,2]]]);
//# sourceMappingURL=main.4cc8394a.chunk.js.map