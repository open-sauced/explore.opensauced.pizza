{"version":3,"sources":["CustomArgs.js","useColorScheme.js","ColorSchemeToggle.js","config.js","Queries.js","App.js","index.js"],"names":["unwrapOutputType","outputType","unwrappedType","isWrappingType","ofType","makeDefaultArg","parentField","arg","type","name","startsWith","endsWith","getDefaultScalarArgValue","argType","kind","value","isEnumType","getValues","map","x","includes","GraphiQLExplorer","defaultValue","useColorSchemeState","createPersistedState","ColorSchemeToggle","systemPrefersDark","useMediaQuery","query","undefined","isDark","setIsDark","useMemo","useEffect","document","documentElement","classList","add","remove","useColorScheme","React","createElement","GraphiQL","Button","label","title","onClick","APP_ID","auth","OneGraphAuth","appId","config","fetchOneGraph","params","fetch","method","headers","authHeaders","body","JSON","stringify","then","response","text","responseBody","parse","e","Queries","ALL","IssuesBeforeQuery","IssuesAfterQuery","FetchGoal","FetchGoals","FetchOwnerQuery","FetchMemberStatusQuery","FetchRateLimitQuery","FetchRepoCountQuery","CreateOpenSaucedGoalsRepo","CreateGoal","UpdateGoal","FetchUserForkCount","ForkRepository","blacklistRe","typeBlackListFn","f","test","typeListBlackListFn","nodeBlackListFn","stripPrefixedDeps","fields","filter","inputFields","possibleTypes","emptyObjectFilterFn","length","App","props","handleEditQuery","setState","handleToggleExplorer","explorerIsOpen","state","handleEditOperationName","operationName","handleLogin","isLoggedIn","Config","logout","result","console","log","login","catch","error","graphiql","schema","getIntrospectionQuery","editor","getQueryEditor","setOption","options","extraKeys","handleInspectOperation","filteredTypes","data","__schema","types","filteredData","buildClientSchema","cm","mousePos","this","parsedQuery","operationKind","token","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","operation","selector","el","querySelector","scrollIntoView","className","onEdit","onRunOperation","handleRunQuery","onToggleExplorer","ref","fetcher","onEditQuery","Toolbar","onChange","key","target","Object","keys","isMutation","trim","indexOf","handlePrettifyQuery","handleToggleHistory","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4cc8394a.chunk.js","sourcesContent":["import GraphiQLExplorer from 'graphiql-explorer';\nimport { isEnumType, isWrappingType } from 'graphql';\n\nfunction unwrapOutputType(outputType) {\n  let unwrappedType = outputType;\n  while (isWrappingType(unwrappedType)) {\n    unwrappedType = unwrappedType.ofType;\n  }\n  return unwrappedType;\n}\n\nexport function makeDefaultArg(\n  parentField,\n  arg,\n) {\n  const unwrappedType = unwrapOutputType(parentField.type);\n  if (\n    unwrappedType.name.startsWith('GitHub')\n    && unwrappedType.name.endsWith('Connection')\n    && (arg.name === 'first' || arg.name === 'orderBy')\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function getDefaultScalarArgValue(\n  parentField,\n  arg,\n  argType,\n) {\n  const unwrappedType = unwrapOutputType(parentField.type);\n  switch (unwrappedType.name) {\n    case 'GitHubRepository':\n      if (arg.name === 'name') {\n        return { kind: 'StringValue', value: 'graphql-js' };\n      } if (arg.name === 'owner') {\n        return { kind: 'StringValue', value: 'graphql' };\n      }\n      break;\n    case 'NpmPackage':\n      if (arg.name === 'name') {\n        return { kind: 'StringValue', value: 'graphql' };\n      }\n      break;\n    default:\n      if (\n        isEnumType(argType)\n        && unwrappedType.name.startsWith('GitHub')\n        && unwrappedType.name.endsWith('Connection')\n      ) {\n        if (\n          arg.name === 'direction'\n          && argType\n            .getValues()\n            .map((x) => x.name)\n            .includes('DESC')\n        ) {\n          return { kind: 'EnumValue', value: 'DESC' };\n        } if (\n          arg.name === 'field'\n          && argType\n            .getValues()\n            .map((x) => x.name)\n            .includes('CREATED_AT')\n        ) {\n          return { kind: 'EnumValue', value: 'CREATED_AT' };\n        }\n      }\n      return GraphiQLExplorer.defaultValue(argType);\n  }\n  return GraphiQLExplorer.defaultValue(argType);\n}\n","import { useEffect, useMemo } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport createPersistedState from 'use-persisted-state';\n\nconst useColorSchemeState = createPersistedState('colorScheme');\n\nexport default function useColorScheme() {\n  const systemPrefersDark = useMediaQuery(\n    {\n      query: '(prefers-color-scheme: dark)',\n    },\n    undefined,\n  );\n  const [isDark, setIsDark] = useColorSchemeState();\n  const value = useMemo(\n    () => (isDark === undefined ? !!systemPrefersDark : isDark),\n    [isDark, systemPrefersDark],\n  );\n  useEffect(() => {\n    if (value) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [value]);\n  return {\n    isDark: value,\n    setIsDark,\n  };\n}\n","import React from 'react';\nimport { GraphiQL } from 'graphiql';\nimport useColorScheme from './useColorScheme';\n\nconst ColorSchemeToggle = () => {\n  const { isDark, setIsDark } = useColorScheme();\n\n  return React.createElement(GraphiQL.Button, {\n    label: 'Theme',\n    title: 'Toggle Dark Mode',\n    onClick: () => setIsDark(!isDark),\n  });\n};\n\nexport default ColorSchemeToggle;\n","import OneGraphAuth from \"onegraph-auth\";\n\nconst APP_ID = \"bc178799-292e-49df-8016-223abf5a07cb\";\n\nconst auth = new OneGraphAuth({\n  appId: APP_ID\n});\n\n// This setup is only needed once per application\nconst fetchOneGraph = (params) => {\n  return fetch(\n    \"https://serve.onegraph.com/dynamic?app_id=\" + APP_ID,\n    {\n      method: \"POST\",\n      headers: {\n        ...auth.authHeaders()\n      },\n      body: JSON.stringify(params),\n    }\n  )\n      .then((response) => response.text())\n      .then((responseBody) => {\n          try {\n              return JSON.parse(responseBody);\n          } catch (e) {\n              return responseBody;\n          }\n      });\n};\n\nconst config = {auth: auth, appId: APP_ID, fetchOneGraph: fetchOneGraph};\n\nexport default config;\n","const Queries = {\n    ALL:`query IssuesBeforeQuery($owner: String!, $repo: String!, $cursor: String) {\n        gitHub {\n          repositoryOwner(login: $owner) {\n            repository(name: $repo) {\n              issues(first: 5, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}, before: $cursor) {\n                totalCount\n                data: edges {\n                  cursor\n                  node {\n                    id\n                    title\n                    url\n                    state\n                    author {\n                      login\n                    }\n                    labels(first: 5) {\n                      data: edges {\n                        node {\n                          id\n                          name\n                          color\n                        }\n                      }\n                    }\n                    comments {\n                      totalCount\n                    }\n                    milestone {\n                      title\n                    }\n                    participants(first: 3) {\n                      totalCount\n                      nodes {\n                        login\n                        avatarUrl\n                      }\n                    }\n                    createdAt\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      query IssuesAfterQuery($owner: String!, $repo: String!, $cursor: String) {\n        gitHub {\n          repositoryOwner(login: $owner) {\n            repository(name: $repo) {\n              issues(first: 5, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}, after: $cursor) {\n                totalCount\n                data: edges {\n                  cursor\n                  node {\n                    id\n                    title\n                    url\n                    state\n                    author {\n                      login\n                    }\n                    labels(first: 5) {\n                      data: edges {\n                        node {\n                          id\n                          name\n                          color\n                        }\n                      }\n                    }\n                    comments {\n                      totalCount\n                    }\n                    milestone {\n                      title\n                    }\n                    participants(first: 3) {\n                      totalCount\n                      nodes {\n                        login\n                        avatarUrl\n                      }\n                    }\n                    createdAt\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      query FetchGoal($number: Int!) {\n        gitHub {\n          viewer {\n            repository(name: \"open-sauced-goals\") {\n              issue(number: $number) {\n                id\n                body\n                title\n                number\n              }\n            }\n          }\n        }\n      }\n      query FetchGoals() {\n        gitHub {\n          viewer {\n            repository(name: \"open-sauced-goals\") {\n              id\n              data: object(expression: \"HEAD:data.json\") {\n                id\n                ... on GitHubBlob {\n                  id\n                  text\n                }\n              }\n              issues(\n                first: 50\n                states: OPEN\n                orderBy: { direction: DESC, field: CREATED_AT }\n              ) {\n                totalCount\n                nodes {\n                  id\n                  full_name: title\n                  body\n                  number\n                  labels(first: 3) {\n                    nodes {\n                      color\n                      name\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      query FetchOwnerQuery($owner: String!) {\n        gitHub {\n          user(login: $owner) {\n            id\n          }\n        }\n      }\n      query FetchMemberStatusQuery() {\n        gitHub {\n          viewer {\n            organization(login: \"open-sauced\") {\n              viewerIsAMember\n            }\n          }\n        }\n      }\n      query FetchRateLimitQuery() {\n        gitHub {\n          rateLimit {\n            remaining\n          }\n        }\n      }\n      \n      query FetchRepoCountQuery() {\n        gitHub {\n          search(query: \"open-sauced-goals\", type: REPOSITORY) {\n            repositoryCount\n          }\n        }\n      }\n      mutation CreateOpenSaucedGoalsRepo($ownerId: ID!) {\n        gitHub {\n          cloneTemplateRepository(\n            input: {\n              repositoryId: \"MDEwOlJlcG9zaXRvcnkyNjYzNDYyNDM=\"\n              visibility: PUBLIC\n              ownerId: $ownerId\n              name: \"open-sauced-goals\"\n            }\n          ) {\n            repository {\n              id\n              name\n              nameWithOwner\n              url\n              issues(\n                first: 10\n                states: OPEN\n                orderBy: { direction: DESC, field: CREATED_AT }\n              ) {\n                totalCount\n                nodes {\n                  id\n                  title\n                  body\n                  number\n                  labels(first: 3) {\n                    nodes {\n                      color\n                      name\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      mutation CreateGoal(\n        $repoId: ID!\n        $title: String!\n        $notes: String\n      ) {\n        __typename\n        gitHub {\n          createIssue(\n            input: {\n              title: $title\n              repositoryId: $repoId\n              body: $notes\n            }\n          ) {\n            issue {\n              id\n              title\n            }\n          }\n        }\n      }\n      mutation UpdateGoal(\n        $id: ID!\n        $state: GitHubIssueState\n        $title: String\n        $notes: String\n      ) {\n        __typename\n        gitHub {\n          updateIssue(\n            input: {\n              id: $id\n              state: $state\n              title: $title\n              body: $notes\n            }\n          ) {\n            issue {\n              id\n              body\n            }\n          }\n        }\n      }\n      query FetchUserForkCount(\n        $repoName: String!\n        $repoOwner: String!\n      ) {\n        gitHub {\n          repository(name: $repoName, owner: $repoOwner) {\n            forks(affiliations: OWNER) {\n              totalCount\n            }\n          }\n        }\n      }\n      mutation ForkRepository(\n        $repoName: String!\n        $repoOwner: String!\n      ) {\n        gitHub {\n          createFork_oneGraph(\n            input: { repoName: $repoName, repoOwner: $repoOwner }\n          ) {\n            clientMutationId\n            repository {\n              id\n              url\n            }\n          }\n        }\n      }\n`,\n    IssuesBeforeQuery:`query IssuesBeforeQuery($owner: String!, $repo: String!, $cursor: String) {\n        gitHub {\n          repositoryOwner(login: $owner) {\n            repository(name: $repo) {\n              issues(first: 5, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}, before: $cursor) {\n                totalCount\n                data: edges {\n                  cursor\n                  node {\n                    id\n                    title\n                    url\n                    state\n                    author {\n                      login\n                    }\n                    labels(first: 5) {\n                      data: edges {\n                        node {\n                          id\n                          name\n                          color\n                        }\n                      }\n                    }\n                    comments {\n                      totalCount\n                    }\n                    milestone {\n                      title\n                    }\n                    participants(first: 3) {\n                      totalCount\n                      nodes {\n                        login\n                        avatarUrl\n                      }\n                    }\n                    createdAt\n                  }\n                }\n              }\n            }\n          }\n        }\n      }`,\n    IssuesAfterQuery:`query IssuesAfterQuery($owner: String!, $repo: String!, $cursor: String) {\n        gitHub {\n          repositoryOwner(login: $owner) {\n            repository(name: $repo) {\n              issues(first: 5, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}, after: $cursor) {\n                totalCount\n                data: edges {\n                  cursor\n                  node {\n                    id\n                    title\n                    url\n                    state\n                    author {\n                      login\n                    }\n                    labels(first: 5) {\n                      data: edges {\n                        node {\n                          id\n                          name\n                          color\n                        }\n                      }\n                    }\n                    comments {\n                      totalCount\n                    }\n                    milestone {\n                      title\n                    }\n                    participants(first: 3) {\n                      totalCount\n                      nodes {\n                        login\n                        avatarUrl\n                      }\n                    }\n                    createdAt\n                  }\n                }\n              }\n            }\n          }\n        }\n      }`,\n    FetchGoal:`\nquery FetchGoal($number: Int!) {\n    gitHub {\n        viewer {\n        repository(name: \"open-sauced-goals\") {\n            issue(number: $number) {\n            id\n            body\n            title\n            number\n            }\n        }\n        }\n    }\n}        \n    `,\n    FetchGoals:`query FetchGoals() {\n  gitHub {\n    viewer {\n      repository(name: \"open-sauced-goals\") {\n        id\n        data: object(expression: \"HEAD:data.json\") {\n          id\n          ... on GitHubBlob {\n              id\n              text\n          }\n        }\n        issues(\n          first: 50\n          states: OPEN\n          orderBy: { direction: DESC, field: CREATED_AT }\n        ) {\n          totalCount\n          nodes {\n            id\n            full_name: title\n            body\n            number\n            labels(first: 3) {\n            nodes {\n                color\n                name\n                id\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n}`,\n    FetchOwnerQuery:`query FetchOwnerQuery($owner: String!) {\n  gitHub {\n    user(login: $owner) {\n      id\n    }\n  }\n}`,\n    FetchMemberStatusQuery:`query FetchMemberStatusQuery() {\n  gitHub {\n    viewer {\n      organization(login: \"open-sauced\") {\n        viewerIsAMember\n      }\n    }\n  }\n}`,\n      FetchRateLimitQuery:`query FetchRateLimitQuery() {\n  gitHub {\n    rateLimit {\n      remaining\n    }\n  }\n}`,\n      FetchRepoCountQuery:`query FetchRepoCountQuery() {\n  gitHub {\n    search(query: \"open-sauced-goals\", type: REPOSITORY) {\n      repositoryCount\n    }\n  }\n}`,\n      CreateOpenSaucedGoalsRepo:`mutation CreateOpenSaucedGoalsRepo($ownerId: ID!) {\n  gitHub {\n    cloneTemplateRepository(\n      input: {\n        repositoryId: \"MDEwOlJlcG9zaXRvcnkyNjYzNDYyNDM=\"\n        visibility: PUBLIC\n        ownerId: $ownerId\n        name: \"open-sauced-goals\"\n      }\n    ) {\n      repository {\n        id\n        name\n        nameWithOwner\n        url\n        issues(\n          first: 10\n          states: OPEN\n          orderBy: { direction: DESC, field: CREATED_AT }\n        ) {\n          totalCount\n          nodes {\n            id\n            title\n            body\n            number\n            labels(first: 3) {\n              nodes {\n                color\n                name\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}`,\n    CreateGoal:`mutation CreateGoal(\n  $repoId: ID!\n  $title: String!\n  $notes: String\n) {\n  __typename\n  gitHub {\n    createIssue(\n      input: {\n        title: $title\n        repositoryId: $repoId\n        body: $notes\n      }\n    ) {\n      issue {\n        id\n        title\n      }\n    }\n  }\n}`,\n    UpdateGoal:`mutation UpdateGoal(\n  $id: ID!\n  $state: GitHubIssueState\n  $title: String\n  $notes: String\n) {\n  __typename\n  gitHub {\n    updateIssue(\n      input: {\n        id: $id\n        state: $state\n        title: $title\n        body: $notes\n      }\n    ) {\n      issue {\n        id\n        body\n      }\n    }\n  }\n}`,\n    FetchUserForkCount:`query FetchUserForkCount(\n  $repoName: String!\n  $repoOwner: String!\n) {\n  gitHub {\n    repository(name: $repoName, owner: $repoOwner) {\n      forks(affiliations: OWNER) {\n        totalCount\n      }\n    }\n  }\n}`,\n    ForkRepository:`mutation ForkRepository(\n  $repoName: String!\n  $repoOwner: String!\n) {\n  gitHub {\n    createFork_oneGraph(\n      input: { repoName: $repoName, repoOwner: $repoOwner }\n    ) {\n      clientMutationId\n      repository {\n        id\n        url\n      }\n    }\n  }\n}`\n};\nexport default Queries;","import React, { Component } from 'react';\nimport GraphiQL from 'graphiql';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport {buildClientSchema, getIntrospectionQuery, parse} from 'graphql';\n\nimport { makeDefaultArg, getDefaultScalarArgValue } from './CustomArgs';\nimport ColorSchemeToggle from './ColorSchemeToggle';\nimport Config from \"./config\";\nimport Queries from \"./Queries\"\nimport 'graphiql/graphiql.css';\nimport './App.css';\nconst DEFAULT_QUERY = \"\";\nconst blacklistRe = /(adroll|airtable|apollo|asana|box|brex|bundlephobia|chargebee|clearbit|cloudflare|contentful|crunchbase|descuri|devTo|docusign|dribbble|dropbox|eggheadio|emailNode|eventil|facebookBusiness|fedex|firebase|gmail|google|googleAds|hubspot|immigrationGraph|intercom|logdna|mailchimp|meetup|mixpanel|mux|netlify|notion|npm|openCollective|orbit|productHunt|quickbooks|rss|salesforce|slack|spotify|stripe|trello|twilio|twitchTv|twitter|ups|usps|ynab|youTube|youTubeSearch|youTubeVideo|zeit|zendesk)/i;\nconst typeListBlackListFn = (f) => {\n  return f.type && f.type.ofType && f.type.ofType.kind === \"LIST\"\n    && f.type.ofType.ofType\n    && f.type.ofType.ofType.ofType\n    && f.type.ofType.ofType.ofType.name\n    && blacklistRe.test(f.type.ofType.ofType.ofType.name)\n}\nconst typeBlackListFn = (f) => {\n  return !(\n    (f.type && f.type.name && blacklistRe.test(f.type.name))\n    || (f.name && blacklistRe.test(f.name))\n    || (f.type && f.type.ofType && f.type.ofType.name && blacklistRe.test(f.type.ofType.name))\n    || typeListBlackListFn(f)\n  );\n}\n// Filter function for picking things that are not blacklisted\nconst nodeBlackListFn = (f) => {\n  return !(\n    (f.type && f.type.name && blacklistRe.test(f.type.name))\n    || (f.name && blacklistRe.test(f.name))\n  );\n}\n// Strips out dependencies that are blacklisted\nconst stripPrefixedDeps = (type) => {\n  return {\n    ...type,\n    fields: type.fields ? type.fields.filter(typeBlackListFn) : type.fields,\n    inputFields: type.inputFields ? type.inputFields.filter(typeBlackListFn) : type.inputFields,\n    possibleTypes: type.possibleTypes ? type.possibleTypes.filter(typeBlackListFn) : type.possibleTypes\n  }\n};\n// Removes OBJECT types that have had all of their fields stripped out.\nconst emptyObjectFilterFn = (type) => {\n  return type.kind !== \"OBJECT\" || type.fields.length > 0;\n};\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.graphiql = null;\n    this.state = {\n      schema: null,\n      query: DEFAULT_QUERY,\n      explorerIsOpen: true,\n      isLoggedIn: false,\n    };\n  }\n\n  componentDidMount() {\n    Config.fetchOneGraph({\n      query: getIntrospectionQuery(),\n    }).then((result) => {\n      const editor = this.graphiql.getQueryEditor();\n      editor.setOption('extraKeys', {\n        ...(editor.options.extraKeys || {}),\n        'Shift-Alt-LeftClick': this.handleInspectOperation,\n      });\n      // To modify schema, we follow this process:\n      // 1) Remove all the types we don't want, based on regex match\n      // 2) Strip out all of the dependencies that matched the same regex\n      // 3) Remove types of kind=OBJECT that have had their fields emptied out (to satisfy schema validation)\n      const filteredTypes = result.data.__schema.types\n        .filter(nodeBlackListFn)\n        .map(stripPrefixedDeps) \n        .filter(emptyObjectFilterFn);\n      const filteredData = {\n        __schema: {\n          ...result.data.__schema, \n          types: filteredTypes\n        }\n      };\n      this.setState({ schema: buildClientSchema(filteredData) });\n    });\n\n    Config.auth.isLoggedIn('github').then((isLoggedIn) => this.setState({isLoggedIn}))\n  }\n\n  handleInspectOperation(\n    cm,\n    mousePos,\n  ) {\n    const { query } = this.state;\n    const parsedQuery = parse(query || '');\n\n    if (!parsedQuery) {\n      console.error(\"Couldn't parse query document\");\n      return null;\n    }\n\n    const token = cm.getTokenAt(mousePos);\n    const start = { line: mousePos.line, ch: token.start };\n    const end = { line: mousePos.line, ch: token.end };\n    const relevantMousePos = {\n      start: cm.indexFromPos(start),\n      end: cm.indexFromPos(end),\n    };\n\n    const position = relevantMousePos;\n\n    const def = parsedQuery.definitions.find((definition) => {\n      if (!definition.loc) {\n        console.log('Missing location information for definition');\n        return false;\n      }\n\n      const { loc } = definition;\n      return loc.start <= position.start && loc.end >= position.end;\n    });\n\n    if (!def) {\n      console.error(\n        'Unable to find definition corresponding to mouse position',\n      );\n      return null;\n    }\n\n    let operationKind;\n    if (def.kind === 'OperationDefinition') {\n      operationKind = def.operation;\n    } else {\n      operationKind = def.kind === 'FragmentDefinition'\n        ? 'fragment'\n        : 'unknown';\n    }\n\n    let operationName;\n    if (def.kind === 'OperationDefinition' && !!def.name) {\n      operationName = def.name.value;\n    } else {\n      operationName = def.kind === 'FragmentDefinition' && !!def.name\n        ? def.name.value\n        : 'unknown';\n    }\n\n    const selector = `.graphiql-explorer-root #${operationKind}-${operationName}`;\n\n    const el = document.querySelector(selector);\n    if (el !== null) {\n      el.scrollIntoView();\n    }\n\n    return false;\n  }\n\n  handleEditQuery = (query) => this.setState({ query });\n  handleToggleExplorer = () => {\n    this.setState({ explorerIsOpen: !this.state.explorerIsOpen });\n  };\n  handleEditOperationName = (operationName) => this.setState({ operationName })\n  handleLogin = () => {\n    const { isLoggedIn } = this.state;\n\n    if (isLoggedIn) {\n      Config.auth.logout('github').then((response) => {\n        if (response.result === 'success') {\n          console.log('Logout succeeded');\n          this.setState({ isLoggedIn: false });\n        } else {\n          console.log('Logout failed');\n        }\n      });\n    } else {\n      Config.auth\n          .login('github')\n          .then(() => {\n            Config.auth.isLoggedIn('github').then((isLoggedIn) => {\n              if (isLoggedIn) {\n                console.log('Successfully logged in to GitHub');\n                this.setState({ isLoggedIn: true });\n              } else {\n                console.log('Did not grant auth for GitHub');\n              }\n            });\n          })\n          .catch((e) => console.error('Problem logging in', e));\n    }\n  }\n\n  render() {\n    const { query, schema, isLoggedIn, explorerIsOpen, operationName } = this.state;\n\n    return (\n      <div className=\"graphiql-container\">\n        <GraphiQLExplorer\n          schema={schema}\n          query={query}\n          onEdit={this.handleEditQuery}\n          operationName={operationName}\n          onRunOperation={(operationName) => this.graphiql.handleRunQuery(operationName)}\n          explorerIsOpen={explorerIsOpen}\n          onToggleExplorer={this.handleToggleExplorer}\n          getDefaultScalarArgValue={getDefaultScalarArgValue}\n          makeDefaultArg={makeDefaultArg}\n        />\n        <GraphiQL\n          ref={(ref) => { this.graphiql = ref; }}\n          fetcher={Config.fetchOneGraph}\n          schema={schema}\n          query={query}\n          onEditQuery={this.handleEditQuery}\n          operationName={operationName}\n        >\n          <GraphiQL.Toolbar>\n          <select\n                defaultValue={\"\"}\n                onChange={(e)=>{\n                  const key = e.target.value;\n                  this.handleEditQuery(Queries[key]);\n                  this.handleEditOperationName(key);\n                }}\n              >\n              <option value=\"\">Choose a Query</option>\n              {Object.keys(Queries).filter(key => key !== 'ALL').map(key => {\n                const isMutation = Queries[key].trim().indexOf('mutation') === 0;\n                return <option key={key} value={key}>{isMutation?\"(Mutation) \":\"\"}{key}</option>\n              })}\n            </select>\n            <GraphiQL.Button\n              onClick={() => this.graphiql.handlePrettifyQuery()}\n              label=\"Prettify\"\n              title=\"Prettify Query (Shift-Ctrl-P)\"\n            />\n            <GraphiQL.Button\n              onClick={() => this.graphiql.handleToggleHistory()}\n              label=\"History\"\n              title=\"Show History\"\n            />\n            <GraphiQL.Button\n              onClick={this.handleToggleExplorer}\n              label=\"Explorer\"\n              title=\"Toggle Explorer\"\n            />\n            <ColorSchemeToggle />\n            <GraphiQL.Button\n                onClick={this.handleLogin}\n                label={`Log ${isLoggedIn ? 'out of' : 'in to'} GitHub`}\n                title=\"GitHub\"\n            />\n          </GraphiQL.Toolbar>\n        </GraphiQL>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}